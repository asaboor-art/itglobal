<?php

namespace App\Models;

use App\Models\Company;
use App\Models\Innovator;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;

use Spatie\Permission\Traits\HasRoles;
use Illuminate\Database\Eloquent\Builder;
use Carbon\Carbon;
// use App\Models\Subscription;
// use App\Models\SubscriptionItem;
// use App\Notifications\IdeaNotification;
// use App\Traits\StripeTrait;
// use App\Notifications\RegisterUserNotification;

class User extends Authenticatable
{

    
    use HasApiTokens, HasFactory, Notifiable, HasRoles;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */

    protected $fillable = [
        'name',
        'email',
        'password',
        'is_blocked',
    ];

    protected $appends = ['member_since'];
    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::addGlobalScope('is_delete', function (Builder $builder) {
            $builder->where('is_delete', 0);
        });
    }
    public function getUserNameAttribute()
    {
        return preg_replace('/[^a-zA-Z0-9\']/', '_', $this->attributes['username']);
    }
    public function getMemberSinceAttribute()
    {
        return Carbon::parse($this->attributes['created_at'])->format('M Y');
    }
    public function isBlocked()
    {
        return ($this->is_blocked == 1) ? true : false;
    }

    public function customer()
    {
        //return $this->hasOne(Company::class);
    }

    public function assignRole($role)
    {
        return $this->roles()->attach($role);
    }


  

    
}
