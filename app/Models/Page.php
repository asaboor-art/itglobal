<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Builder;
use App\Models\BaseModel;
use Auth;
class Page extends BaseModel
{
    use HasFactory;
    protected $fillable = ['name','slug','description','view','layout','has_custom_view','display_to_menu','is_active','is_delete','is_home_page'];
    protected $table = 'pages';

    private $rules = [
        'name' => 'required',
        'slug' => 'required',
        'view' =>  'required',
        'description' => 'required',
        'layout' => 'required',
        'display_to_menu' => 'required|min:0|max:1',
        'is_home_page' => 'required|min:0|max:1',
    ];
    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::addGlobalScope('active_pages', function (Builder $builder) {
            $user = Auth::user();
            if(isset($user) && !$user->hasRole('admin')){
                $builder->where('pages.is_delete', '=', 0);
            }else{
                $builder->where('pages.is_delete', '=', 0)->where('pages.is_active','=',1);
            }
           
        });
    }

    public function setSlugAttribute($slug)
    {

        if(isset($this->id)){
            $page = self::where('slug',$slug)->where('id','!=',$this->id)->first();
            $this->attributes['slug'] = $slug.'-'.((int)$this->id);
            return true;
        }
        $page = self::where('slug',$slug)->first();
        if(isset($page)){
            $this->attributes['slug'] = $slug.'-'.((int)$page->id+1);
            return true;
        }
        $this->attributes['slug'] = $slug;
        return true;
    }

    public function getRecordDataTable($request){
        if($request->has('search') && $request->search !=''){
            $this->setFilters(['name','like','%'.$request->search.'%']);     
        }

        $condition = [];
        
        $result = $this->getAllDatatables([],
        ['id','name','slug','view','is_active','display_to_menu','has_custom_view','created_at'],
        [],'is_delete');

        
            $count = 0;
            $data = [];
            $response = [];
            foreach ($result['data'] as $key => $row) {
                $count++;
                $data['id'] = $row->id;
                $data['is_active'] = $row->is_active;
                $data['sno'] = $count;
                $data['name'] = $row->name ;
                $data['view'] = $row->view ;
                $data['slug'] = $row->slug;
                $data['status'] = $row->is_active == 1 ? '<span class="badge badge-success">' . trans('lang.active') . '</span>' : '<span class="badge badge-danger">' . trans('lang.inactive') . '</span>';
                $data['display_to_menu'] = $row->display_to_menu == 1 ? '<span class="badge badge-success">' . trans('lang.active') . '</span>' : '<span class="badge badge-danger">' . trans('lang.inactive') . '</span>';
                $data['created_at'] =  $row->created_at;
                $response['data'][] = $data;
            }

            $response['columns'] = [];
            if (!isset($response['data'])) {
                $response['data'] = [];
            }
            $response['totalRecords'] = $result['totalRecord'];
            $response['pages'] = $result['pages'];
            $response['totalFilterRecords'] = $result['totalFilterRecords'];

            return $response;
    }

    public function getRule(){
        return $this->rules;
    }
}
