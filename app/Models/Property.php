<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Builder;
use App\Models\BaseModel; 
use App\Helpers\Helper;
use Auth;

class Property extends BaseModel
{
    use HasFactory;
    protected $fillable = ['name','slug','description','address','lognitude','latitude','developer','type','is_active','is_delete','category','city','country','price','area'];
    public $class_name = 'App\Models\Property';
    protected $table = 'properties';

    private $rules = [
        'name' => 'required',
        'slug' => 'required',
        'address' =>  'required',
        'description' => 'required',
        'address' => 'required',
        'developer' => 'required|exists:developers,id',
        'type' => 'required|exists:property_types,id',
        'category' => 'required',
        'city' => 'required',
        'price' => 'required|numeric',
        'area'  => 'required|numeric',
    ];

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::addGlobalScope('active_properties', function (Builder $builder) {
            $user = Auth::user();
            if(isset($user) && !$user->hasRole('admin')){
                $builder->where('properties.is_delete', '=', 0);
            }else{
                $builder->where('properties.is_delete', '=', 0)->where('properties.is_active','=',1);
            }
           
        });
    }

    // public function setSlugAttribute($slug)
    // {
    //     $slug = preg_replace("![^a-z0-9]+!i", "-", $slug);
    //     if(isset($this->id)){
    //         $property = self::where('slug',$slug)->where('id','!=',$this->id)->first();
    //         $this->attributes['slug'] = $slug.'-'.((int)$this->id);
    //         return true;
    //     }
    //     $property = self::where('slug',$slug)->first();
    //     if(isset($property)){
    //         $this->attributes['slug'] = $slug.'-'.((int)$property->id+1);
    //         return true;
    //     }
    //     $this->attributes['slug'] = $slug;
    //     return true;
    // }

    public function getPriceAttribute()
    {   
        if(!isset(request()->id) && !isset(request()->slug)){
            
            return Helper::priceFormat($this->attributes['price']);
        }
        return $this->attributes['price'];
        
    }

    public function getAreaAttribute()
    {   
        if(!isset($this->id)){
            return Helper::areaFormat($this->attributes['area']);
        }
        return $this->attributes['area'];
    }

    public function getRecordDataTable($request){
        if($request->has('search') && $request->search !=''){
            $this->setFilters(['name','like','%'.$request->search.'%']);     
        }

        $condition = [];
        $result = [];
        $this->setSelectedColumn(['properties.id','properties.name','properties.slug','address','area','price','city','developer','type','properties.is_active','category','properties.created_at','developers.name as Developer','property_types.name as PropertyType']);

        $this->setRenderColumn([
            [
                'name' => 'id',
                'db_name' => 'id',
                'type' => 'integer',
                'html' => false,
            ],
            [
                'name' => 'name',
                'type' => 'string',
                'html' => false,
                'link' => 'property',
                'link_column' => 'slug',
                
            ],
            [
                'name' => 'slug',
                'type' => 'string',
                'html' => false,
            ],
            [
                'name' => 'address',
                'type' => 'string',
                'html' => false,
            ],
            [
                'name' => 'city',
                'type' => 'string',
                'html' => false,
            ],
            [
                'name' => 'area',
                'type' => 'string',
                'html' => false,
            ],
            [
                'name' => 'price',
                'type' => 'string',
                'html' => false,
            ],
            [
                'name' => 'Developer',
                'type' => 'string',
                'html' => false,
            ],
            [
                'name' => 'PropertyType',
                'type' => 'string',
                'html' => false,

            ],
            [
                'name' => 'category',
                'type' => 'string',
                'html' => false,
            ],
            [
                'name' => 'created_at',
                'type' => 'string',
                'html' => false,
            ],
            [
                'name' => 'is_active',
                'type' => 'boolean',
                'html' => false,
                
            ],
            [
                'name' => 'status',
                'type' => 'boolean',
                'html' => true,
                'condition_colum' => 'is_active'
            ],
            

        ]);

        $result = $this->getAllDatatables([],
        $this->getSelectedColumns(),
        [],'',[['developers','properties.developer','=','developers.id'],['property_types','properties.type','=','property_types.id']]);
            
        return $result;
    }

    public function getRule(){
        return $this->rules;
    }

    public function getRecodsForSelect(){
        try{
            $response = [];
            $data = $this->getAll([],['id','name as text']);
            return $data;
        }catch(Exception $e){
            Logger::error($e->getMessage());
        }
    }

    
}
